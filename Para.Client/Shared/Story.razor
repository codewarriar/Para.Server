@using Para.Client.Services
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject Para.Client.Services.IAuthService AuthService
@using Blazored.Video
@using Blazored.Video.Support
@*@inject Para.Client.Services.IStoryService StoryService*@

<div class="container-fluid">
    <div class=story-container>
       
        @foreach (var item in UserStories)
        {
             @*<header class="w3-container">
            <h3 style="text-align:center">New Reports</h3>
        </header>*@
            <br />
            <div class="card" style="width:48rem;">
                <img class="card-img-top" src="arv-space56.png" height="50" width="50" alt="Card image cap">
                <div class="card-body">
                    <h5 class="card-title">@item.Title</h5>
                    <p class="card-text">@item.Description</p>
                    <div class="card-group">
                        <iframe width="255" height="120" src="@item.VideoUrl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                    </div>
                    <br />
                    <h6 class="card-subtitle mb-2 ">@item.InvestigationType</h6>
                    <h6 class="card-subtitle mb-2 ">@item.Time</h6>
                    <a href="#" class="btn btn-primary">@item.Location</a>
                    <a href="#" class="btn btn-primary">@item.User.Username </a>
                </div>
            </div>

        }
    </div>
</div>


@*https://www.youtube.com/watch?v=J1kTt0eTiwA&t=33s*@

@code {
    [Parameter] public List<Stories> UserStories { get; set; } = new List<Stories>();
    [Parameter] public Dictionary<VideoEvents, VideoStateOptions> VideoEventOptions { get; set; }

    [Inject]
    public IStoryService storyService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        UserStories = await storyService.GetAllStories();
    }
    //void OnPlay(VideoState state)
    //{
    //    var url = state.CurrentSrc;
    //    // do something with this
    //    Dictionary<VideoEvents, VideoStateOptions> options = new Dictionary<VideoEvents, VideoStateOptions>();

    //    options[VideoEvents.TimeUpdate] = new VideoStateOptions { CurrentTime = true, CurrentSrc = true };

    //    options[VideoEvents.Play] = new VideoStateOptions { CurrentSrc = true };
    //}
    //void OnTimeUpdate(VideoState state)
    //{
    //    var url = state.CurrentSrc;
    //    var currentTime = state.CurrentTime;
    //    // do something with this
    //}

}
